using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace Day6Task
{
    internal class Customer
    {
        public int Id { get; set; }
        public string Name { get; set; } = String.Empty;
        public long Phone {  get; set; }

        public Customer()
        {
            //Id = 1001;
            //Name = "Johnny Naorem";
            //Phone = 8787470933;
        }

        public override string ToString()
        {
            return $"Id: {Id}, Name: {Name}, Phone: {Phone}";
        }
    }
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Day6Task
{
    internal interface ICustomerServices
    {
        public bool BuyProducts(int pid);
        public void GetAllProducts();
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Day6Task
{
    internal interface ISupplierServices
    {
        public bool AddProduct(Product product, int sid);
        void GetAllSuppliers();
        void GetAllCustomers();
        public bool UpdateProduct(int pid, int sid);
    }
}



----------------------------------------------------------------------------------------------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Day6Task
{
    internal class Product
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public int Price { get; set; }
        public int Quantity { get; set; }


        public Product()
        {
            //Id = 07;
            //Name = "MSI Bravo 15 Gaming Laptop";
            //Price = 80000;
            //Quantity = 10;

        }

        public override string ToString()
        {
            return $"Id: {Id}, Name: {Name}, Price: {Price}, Quantity: {Quantity}";
        }
    }
}



--------------------------------------------------------------------------------------------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;

namespace Day6Task
{
    internal class ProductServices : ISupplierServices, ICustomerServices
    {
        private List<Product> products = new List<Product>();
        private List<Supplier> suppliers = new List<Supplier>();
        private List<Customer> customers = new List<Customer>();

        public ProductServices()
        {
            products.Add(new Product { Id = 2001, Name = "MSI Bravo 15 Laptop", Price = 90000, Quantity = 1 });
            suppliers.Add(new Supplier { Id = 9002, Name = "Biraj Singh" });
            customers.Add(new Customer { Id = 6001, Name = "Nandu", Phone = 9000000000 });
        }

        private Supplier GetSupplier(int sid)
        {
            return suppliers.FirstOrDefault(s => s.Id == sid);
        }

        public bool AddProduct(Product product, int sid)
        {
            Supplier supplier = GetSupplier(sid);
            if (supplier == null)
            {
                Console.WriteLine("Supplier not found in Supplier List!!! Unable to Add Product!!!!.");
                return false;
            }

            Product existingProduct = products.FirstOrDefault(p => p.Id == product.Id);
            if (existingProduct != null)
            {
                existingProduct.Quantity += product.Quantity;
            }
            else
            {
                products.Add(product);
                Console.WriteLine($"Product of Product ID \"{product.Id}\" is Added Successfully by Supplier ID \"{sid}\"");
            }
            
            return true;
        }

        public void GetAllProducts()
        {
            foreach (var item in products)
            {
                Console.WriteLine(item);
            }
        }

        public void GetAllSuppliers()
        {
            foreach (var item in suppliers)
            {
                Console.WriteLine(item);
            }
        }

        public void GetAllCustomers()
        {
            foreach (var item in customers)
            {
                Console.WriteLine(item);
            }
        }

        private Product GetProduct(int pid)
        {
            return products.FirstOrDefault(p => p.Id == pid);
        }

        

        public bool BuyProducts(int pid)
        {
            Product product = GetProduct(pid);
            if (product == null)
            {
                Console.WriteLine("Product not found. Please try another product.");
                return false;
            }
            if (product.Quantity > 0)
            {
                product.Quantity--;
                Console.WriteLine($"Product of Product ID \"{pid}\" is bought successfully. Remaining quantity: \"{product.Quantity}\"");
                return true;
            }
            else
            {
                Console.WriteLine("Product is out of stock.");
                return false;
            }
        }

        public bool UpdateProduct(int pid, int sid)
        {
            {
                Supplier supplier = GetSupplier(sid);
                if (supplier == null)
                {
                    Console.WriteLine("Supplier not found in Supplier List!!! Unable to Add Product!!!!.");
                    return false;
                }
                Product existingProduct = products.FirstOrDefault(p => p.Id == pid);
                if (existingProduct != null)
                {
                    existingProduct.Quantity += 1;
                    Console.WriteLine($"Product Quantity of Product ID \"{pid}\" is Updated by Supplier ID \"{sid}\"");
                }
                else {
                    Console.WriteLine($"Product ID \"{pid}\" is Not in Product List");
                }
                
                return true;
            }
        }
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------------------------

using System;

namespace Day6Task
{
    internal class Program
    {
        private ISupplierServices productServices;
        private ICustomerServices customerServices;

        public Program()
        {
            productServices = new ProductServices();
            customerServices = (ICustomerServices)productServices;
        }

        void PrintMainMenu()
        {
            Console.WriteLine("Welcome to the Product Management Service");
            Console.WriteLine("1 - Customer Interaction");
            Console.WriteLine("2 - Supplier Interaction");
            Console.WriteLine("0 - Exit");
        }

        void PrintCustomerMenu()
        {
            Console.WriteLine("Customer Menu:");
            Console.WriteLine("1 - Buy Product");
            Console.WriteLine("2 - View All Products");
            Console.WriteLine("0 - Back to Main Menu");
        }

        void PrintSupplierMenu()
        {
            Console.WriteLine("Supplier Menu:");
            Console.WriteLine("1 - Add Product");
            Console.WriteLine("2 - Update Product");
            Console.WriteLine("3 - View All Products");
            Console.WriteLine("4 - View All Customers");
            Console.WriteLine("5 - View All Suppliers");
            Console.WriteLine("0 - Back to Main Menu");
        }

        void MainInteraction()
        {
            var choice = 0;
            do
            {
                PrintMainMenu();
                choice = Convert.ToInt32(Console.ReadLine());
                switch (choice)
                {
                    case 1:
                        CustomerInteraction();
                        break;
                    case 2:
                        SupplierInteraction();
                        break;
                    case 0:
                        Console.WriteLine("Exiting...");
                        break;
                    default:
                        Console.WriteLine("Invalid option");
                        break;
                }
            } while (choice != 0);
        }

        void CustomerInteraction()
        {
            var choice = 0;
            do
            {
                PrintCustomerMenu();
                choice = Convert.ToInt32(Console.ReadLine());
                switch (choice)
                {
                    case 1:
                        BuyProducts();
                        break;
                    case 2:
                        PrintAllProducts();
                        break;
                    case 0:
                        return; 
                    default:
                        Console.WriteLine("Invalid option");
                        break;
                }
            } while (choice != 0);
        }

        void SupplierInteraction()
        {
            var choice = 0;
            do
            {
                PrintSupplierMenu();
                choice = Convert.ToInt32(Console.ReadLine());
                switch (choice)
                {
                    case 1:
                        AddProduct();
                        break;
                    case 2:
                        Update(); 
                        break;
                    case 3:
                        PrintAllProducts();
                        break;
                    case 4:
                        PrintAllCustomers();
                        break;
                    case 5:
                        PrintAllSuppliers();
                        break;
                    case 0:
                        return; 
                    default:
                        Console.WriteLine("Invalid option");
                        break;
                }
            } while (choice != 0);
        }

        private void AddProduct()
        {
            Product product = new Product();
            Console.WriteLine("Enter Product Name");
            product.Name = Console.ReadLine();
            Console.WriteLine("Enter Id");
            product.Id = Convert.ToInt16(Console.ReadLine());
            Console.WriteLine("Enter price");
            product.Price = Convert.ToInt16(Console.ReadLine());
            Console.WriteLine("Enter Quantity");
            product.Quantity = Convert.ToInt16(Console.ReadLine());
            Console.WriteLine("Enter Supplier ID");
            int id = Convert.ToInt16(Console.ReadLine());

            productServices.AddProduct(product, id);
        }

        private void Update()
        {
            Console.WriteLine("Enter Supplier Id: ");
            int sid = Convert.ToInt16(Console.ReadLine());
            Console.WriteLine("Enter Product Id: ");
            int pid = Convert.ToInt16(Console.ReadLine());
            productServices.UpdateProduct(pid, sid);
        }

        private void PrintAllProducts()
        {
            customerServices.GetAllProducts();
        }

        private void PrintAllCustomers()
        {
            productServices.GetAllCustomers();
        }

        private void PrintAllSuppliers()
        {
            productServices.GetAllSuppliers();
        }

        private void BuyProducts()
        {
            Console.WriteLine("Enter Product Id which you want to Buy: ");
            int id = Convert.ToInt32(Console.ReadLine());

            bool success = customerServices.BuyProducts(id);
            if (success)
            {
                Console.WriteLine("Product purchase successful.");
            }
            else
            {
                Console.WriteLine("Product purchase failed.");
            }
        }

        static void Main(string[] args)
        {
            var program = new Program();
            program.MainInteraction();
        }
    }
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;

namespace Day6Task
{
    internal class Supplier
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;

        public Supplier() {
            //Id = 1901;
            //Name = "Manij Pande";
        }
        public override string ToString()
        {
            return $"Id: {Id}, Name: {Name}";
        }

    }

}
